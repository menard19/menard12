class BankAccount:
    def __init__(self, account_holder, balance):
        self.account_holder = account_holder  # public attribute
        self.__balance = balance  # private attribute

    # Getter method for balance
    def get_balance(self):
        return self.__balance

    # Setter method for balance
    def deposit(self, amount):
        if amount > 0:
            self.__balance += amount
        else:
            print("Deposit amount must be positive.")

    # Another method to withdraw money
    def withdraw(self, amount):
        if amount > 0 and amount <= self.__balance:
            self.__balance -= amount
        else:
            print("Invalid withdrawal amount.")

    # Public method to display account information
    def display_account_info(self):
        print(f"Account Holder: {self.account_holder}")
        print(f"Balance: ${self.get_balance()}")

# Create a BankAccount object
account = BankAccount("John Menard", 1000)

# Accessing public attribute
print(account.account_holder)  # John Menard

# Accessing private attribute directly will raise an error
# print(account.__balance)  # AttributeError: 'BankAccount' object has no attribute '__balance'

# Accessing private attribute via getter method
print(account.get_balance())  # 1000

# Depositing money
account.deposit(500)
print(account.get_balance())  # 1500

# Withdrawing money
account.withdraw(200)
print(account.get_balance())  # 1300

# Trying to withdraw more than available balance
account.withdraw(2000)  # Invalid withdrawal amount.

# Displaying account information
account.display_account_info()
